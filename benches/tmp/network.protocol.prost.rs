// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Entity {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(fixed32, tag = "2")]
    pub ip_address: u32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AmountDetails {
    #[prost(uint64, tag = "1")]
    pub value: u64,
    #[prost(bool, tag = "2")]
    pub is_locked: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransactionRequest {
    #[prost(bool, tag = "1")]
    pub is_priority: bool,
    #[prost(uint64, tag = "2")]
    pub transaction_id: u64,
    #[prost(sfixed64, tag = "3")]
    pub creation_time: i64,
    #[prost(string, tag = "4")]
    pub memo: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "5")]
    pub associated_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, uint32", tag = "6")]
    pub metadata: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(message, optional, tag = "7")]
    pub sender: ::core::option::Option<Entity>,
    #[prost(enumeration = "TransactionStatus", tag = "10")]
    pub status: i32,
    #[prost(oneof = "transaction_request::Result", tags = "8, 9")]
    pub result: ::core::option::Option<transaction_request::Result>,
}
/// Nested message and enum types in `TransactionRequest`.
pub mod transaction_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Result {
        #[prost(string, tag = "8")]
        Error(::prost::alloc::string::String),
        #[prost(message, tag = "9")]
        Amount(super::AmountDetails),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransactionStatus {
    StatusUnspecified = 0,
    StatusPending = 1,
    StatusConfirmed = 2,
    StatusRejected = 3,
}
impl TransactionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusUnspecified => "STATUS_UNSPECIFIED",
            Self::StatusPending => "STATUS_PENDING",
            Self::StatusConfirmed => "STATUS_CONFIRMED",
            Self::StatusRejected => "STATUS_REJECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNSPECIFIED" => Some(Self::StatusUnspecified),
            "STATUS_PENDING" => Some(Self::StatusPending),
            "STATUS_CONFIRMED" => Some(Self::StatusConfirmed),
            "STATUS_REJECTED" => Some(Self::StatusRejected),
            _ => None,
        }
    }
}
